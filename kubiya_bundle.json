{
  "tools": [
    {
      "name": "test_123",
      "source": null,
      "alias": null,
      "description": "Prints pandas {name}!",
      "type": "docker",
      "content": "\ncurl -LsSf https://astral.sh/uv/install.sh | sh > /dev/null 2>&1\n. $HOME/.cargo/env\n\nuv venv > /dev/null 2>&1\n. .venv/bin/activate > /dev/null 2>&1\n\nuv pip install -r /tmp/requirements.txt > /dev/null 2>&1\n\npython /tmp/main.py \"{{ .name }}\" \"{{ .boolean_val }}\" \"{{ .optional_str }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "name",
          "type": null,
          "description": "Input param for arg: name, type: string",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "boolean_val",
          "type": null,
          "description": "Input param for arg: boolean_val, type: string, Options: true, false",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        },
        {
          "name": "optional_str",
          "type": null,
          "description": "Input param for arg: optional_str, type: string",
          "required": false,
          "default": "sheeesh",
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "\nfrom typing_extensions import Annotated\n\nimport typer\n\ndef test_123(\n    name: str,\n    boolean_val: bool,  # This will validate that the input is a boolean\n    optional_str: Annotated[\n        str, typer.Argument()\n    ] = \"sheeesh\",  # This is how to add a default value\n):\n    import pandas as pd\n\n    print(f\"Hello {name}! {boolean_val} {optional_str}\")\n    df = pd.DataFrame(\n        {\"name\": [name], \"boolean_val\": [boolean_val], \"test\": [optional_str]}\n    )\n\n    print(df)\n\n\nif __name__ == \"__main__\":\n    typer.run(test_123)\n"
        },
        {
          "source": null,
          "destination": "/tmp/requirements.txt",
          "content": "pandas==2.2.3\ntyper==0.12.5"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"test_123\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"name (Required)<br/>Input param for arg: name, type: string\"):::paramClass\n        Param1(\"boolean_val (Required)<br/>Input param for arg: boolean_val, type: string, Options: true, false\"):::paramClass\n        Param2(\"optional_str (Optional)<br/>Input param for arg: optional_str, type: string<br/>Default: sheeesh\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>curl -LsSf https://astral.sh/uv/install.sh | sh >...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "say_hello",
      "source": null,
      "alias": null,
      "description": "Prints hello {name}!",
      "type": "docker",
      "content": "\ncurl -LsSf https://astral.sh/uv/install.sh | sh > /dev/null 2>&1\n. $HOME/.cargo/env\n\nuv venv > /dev/null 2>&1\n. .venv/bin/activate > /dev/null 2>&1\n\nuv pip install -r /tmp/requirements.txt > /dev/null 2>&1\n\npython /tmp/main.py \"{{ .name }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "name",
          "type": null,
          "description": "name to say hello to",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [],
      "secrets": [],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "import argparse\n\n\ndef hello_world(name: str):\n    print(f\"Hello, {name}!\")\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Print hello {name}!\")\n    parser.add_argument(\"name\", help=\"Name to say hello to\")\n\n    # Parse command-line arguments\n    args = parser.parse_args()\n\n    # Get coordinates for the given city\n    name = args.name\n\n    hello_world(name)\n"
        },
        {
          "source": null,
          "destination": "/tmp/requirements.txt",
          "content": ""
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"say_hello\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"name (Required)<br/>name to say hello to\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>curl -LsSf https://astral.sh/uv/install.sh | sh >...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    },
    {
      "name": "create_ui_component_svg",
      "source": null,
      "alias": null,
      "description": "Creates a UI component based on {description} in svg format ",
      "type": "docker",
      "content": "\ncurl -LsSf https://astral.sh/uv/install.sh | sh > /dev/null 2>&1\n. $HOME/.cargo/env\n\nuv venv > /dev/null 2>&1\n. .venv/bin/activate > /dev/null 2>&1\n\nuv pip install -r /tmp/requirements.txt > /dev/null 2>&1\n\npython /tmp/main.py \"{{ .description }}\"\n",
      "content_url": null,
      "args": [
        {
          "name": "description",
          "type": null,
          "description": "description of the UI component you want created",
          "required": true,
          "default": null,
          "options": null,
          "options_from": null
        }
      ],
      "env": [
        "SLACK_THREAD_TS",
        "SLACK_CHANNEL_ID"
      ],
      "secrets": [
        "SLACK_API_TOKEN",
        "OPEN_AI_API_KEY_1"
      ],
      "dependencies": null,
      "dependencies_url": null,
      "openapi": null,
      "with_files": [
        {
          "source": null,
          "destination": "/tmp/main.py",
          "content": "import os\nfrom datetime import datetime\n#import requests\n#import argparse\nimport litellm\n\nfrom pathlib import Path\nfrom slack_sdk import WebClient\nfrom slack_sdk.errors import SlackApiError\n\n\n\ndef get_svg_for_ui_component(description: str) -> str:\n    \"\"\"\n    This function prompts GPT-4 to create the UI for a given description,\n    delivering it in the form of SVG code only.\n\n    :param description: A string describing the UI or UI component.\n    :param api_key: OpenAI API key for authentication.\n    :return: SVG code as a string.\n    \"\"\"\n    prompt = f\"Create an SVG representation of the following UI component: {description}. Return only the SVG code and nothing else.\"\n\n\n    openai_api_key = os.environ['OPEN_AI_API_KEY_1']\n    if not openai_api_key:\n        print(\"OPEN_AI_API_KEY_1 environment variable is not set.\")\n        return\n\n    # Call the GPT-4 API\n    response = litellm.completion(\n            model=\"openai/gpt-4o\",\n            api_key=openai_api_key,\n            base_url='https://llm-proxy.kubiya.ai',\n            messages=[\n                {\n                    \"role\": \"user\",\n                    \"content\": prompt,\n                }\n            ],\n        )\n\n    # Extract and return the SVG code from the response\n    svg_code = response['choices'][0]['message']['content'].strip()\n    return svg_code\n\n\ndef save_svg_file(svg_code) -> Path:\n    \"\"\"\n    Saves the provided SVG code to a .svg file with a timestamped file name.\n    \n    :param svg_code: The SVG code as a string.\n    \"\"\"\n    # Get the current date and time formatted as YYYY_MM_DD_HH_MM_SS\n    timestamp = datetime.now().strftime(\"%Y_%m_%d_%H_%M_%S\")\n    file_name = f\"{timestamp}.svg\"\n    \n    file_path = Path(file_name)\n    file_path.write_text(svg_code)\n    print(f\"SVG file saved as {file_name}\")\n    return file_path\n\n\ndef send_slack_file_to_thread(token, channel_id, thread_ts, file_path, initial_comment):\n    client = WebClient(token=token)\n    try:\n        client.chat_meMessage(\n            channel=channel_id,\n            text=\"Here is the SVG code for the UI component\"\n        )\n        response = client.files_upload_v2(\n            channel=channel_id,\n            file=file_path,\n            initial_comment=initial_comment,\n            thread_ts=thread_ts,\n        )\n        print(f\"File uploaded to Slack thread: {response}\")\n        return response\n    except SlackApiError as e:\n        print(f\"Error sending file to Slack thread: {e}\")\n        raise\n\n\n# Example usage\nif __name__ == \"__main__\":\n    description = \"simple button with rounded corners and a gradient background\"\n\n    try:\n        token = os.environ['SLACK_API_TOKEN']\n        channel_id = os.environ['SLACK_CHANNEL_ID']\n        thread_ts = os.environ['SLACK_THREAD_TS']\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    # Retrieve the SVG code\n    try:\n        svg_code = get_svg_for_ui_component(description)\n        print(svg_code)\n\n        if not svg_code:\n            print(\"No SVG code returned from GPT-4\")\n        \n        else:\n            # Call the function with the SVG code\n            file_path = save_svg_file(svg_code)\n            comment = \"Here is the SVG code for the UI component\"\n            send_slack_file_to_thread(token, channel_id, thread_ts, str(file_path.resolve()), comment)\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n\n\n\n\n#if __name__ == \"__main__\":\n#    parser = argparse.ArgumentParser(description=\"Print hello {name}!\")\n#    parser.add_argument(\"name\", help=\"Name to say hello to\")\n\n#    # Parse command-line arguments\n#    args = parser.parse_args()\n\n#    # Get coordinates for the given city\n#    name = args.name\n\n#    hello_world(name)\n"
        },
        {
          "source": null,
          "destination": "/tmp/requirements.txt",
          "content": "requests==2.32.3\nlitellm==1.49.5\nslack_sdk==3.33.2"
        }
      ],
      "with_services": [],
      "with_git_repo": null,
      "with_volumes": [],
      "entrypoint": [],
      "icon_url": null,
      "image": "python:3.12",
      "long_running": false,
      "on_start": null,
      "on_complete": null,
      "mermaid": "graph TD\n    %% Styles\n    classDef triggerClass fill:#3498db,color:#fff,stroke:#2980b9,stroke-width:2px,font-weight:bold\n    classDef paramClass fill:#2ecc71,color:#fff,stroke:#27ae60,stroke-width:2px\n    classDef execClass fill:#e74c3c,color:#fff,stroke:#c0392b,stroke-width:2px,font-weight:bold\n    classDef envClass fill:#f39c12,color:#fff,stroke:#f1c40f,stroke-width:2px\n\n    %% Main Components\n    Trigger(\"Trigger\"):::triggerClass\n    Params(\"Parameters\"):::paramClass\n    Exec(\"create_ui_component_svg\"):::execClass\n    Env(\"Environment\"):::envClass\n\n    %% Flow\n    Trigger --> Params --> Exec\n    Env --> Exec\n\n    %% Trigger Options\n    User(\"User\")\n    API(\"API\")\n    Webhook(\"Webhook\")\n    Cron(\"Scheduled\")\n    User --> Trigger\n    API --> Trigger\n    Webhook --> Trigger\n    Cron --> Trigger\n\n    %% Parameters\n    subgraph Parameters[\"Parameters\"]\n        direction TB\n        Param0(\"description (Required)<br/>description of the UI component you want created\"):::paramClass\n    end\n    Parameters --- Params\n\n    %% Execution\n    subgraph Execution[\"Execution\"]\n        direction TB\n        Code(\"Script: <br/>curl -LsSf https://astral.sh/uv/install.sh | sh >...\")\n        Type(\"Type: Docker\")\n        Image(\"Docker Image: python:3.12\")\n    end\n    Execution --- Exec\n\n    %% Environment\n    subgraph Environment[\"Environment\"]\n        direction TB\n        EnvVars(\"Environment Variables:<br/>SLACK_THREAD_TS<br/>SLACK_CHANNEL_ID\"):::envClass\n        Secrets(\"Secrets:<br/>SLACK_API_TOKEN<br/>OPEN_AI_API_KEY_1\"):::envClass\n    end\n    Environment --- Env\n\n    %% Context Note\n    ContextNote(\"Parameter values can be<br/>fetched from context<br/>based on the trigger\")\n    ContextNote -.-> Params",
      "workflow": false,
      "metadata": {}
    }
  ],
  "errors": [],
  "python_bundle_version": "3.12.7"
}